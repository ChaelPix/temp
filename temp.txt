#include <opencv2/opencv.hpp>


cv::Scalar detectColor(const cv::Mat& image) {
  r HSV
    cv::Mat hsv;
    cv::cvtColor(image, hsv, cv::COLOR_BGR2HSV);


    int low_H = 30, low_S = 30, low_V = 30;
    int high_H = 80, high_S = 255, high_V = 255;
    cv::Scalar low_thresh(low_H, low_S, low_V);
    cv::Scalar high_thresh(high_H, high_S, high_V);

    cv::Mat mask;
    cv::inRange(hsv, low_thresh, high_thresh, mask);

 
    std::vector<std::vector<cv::Point>> contours;
    cv::findContours(mask, contours, cv::RETR_EXTERNAL, cv::CHAIN_APPROX_SIMPLE);

    if (!contours.empty()) {
    
        std::sort(contours.begin(), contours.end(), [](const std::vector<cv::Point>& c1, const std::vector<cv::Point>& c2){
            return cv::contourArea(c1) > cv::contourArea(c2);
        });

    
        cv::Rect roi = cv::boundingRect(contours[0]);


        cv::Scalar meanColor = cv::mean(image(roi));
        return meanColor;
    }

 
    return cv::Scalar(0, 0, 0);
}

